package com.example.samuraitravel.controller;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.form.UserEditForm;
import com.example.samuraitravel.repository.UserRepository;
import com.example.samuraitravel.security.UserDetailsImpl;
import com.example.samuraitravel.service.UserService;

@Controller
@RequestMapping("/user") 
public class UserController {
	private final UserRepository userRepository;
	private final UserService userService;
	
	public UserController(UserRepository userRepository , UserService userService) {
		this.userRepository = userRepository;
		this.userService = userService;
	}
	
	@GetMapping
	public String idex(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {//@AuthenticationPrincipalアノテーションをつけることで、ログイン中のユーザー情報を取得できる SecurityContextから情報を取得している
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());
		//user/indexに返すまえにuserをインスタンス化するのはログインしたあとに編集した可能性があるから?
		
		
		model.addAttribute("user",user);
		
		return "user/index";
	}
	
	@GetMapping("/edit")
	public String edit(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, Model model) {
		User user = userRepository.getReferenceById(userDetailsImpl.getUser().getId());//ログインしているユーザーのデータをデータベースからとってきている。
		UserEditForm userEditForm = new UserEditForm(user.getId(),user.getName(),user.getFurigana(),user.getPostalCode(),user.getAddress(),user.getPhoneNumber(),user.getEmail());
		
		model.addAttribute("userEditForm",userEditForm);//フォームインスタンスをビューに渡している
		
		return "user/edit";
	}
	
	@PostMapping("/update")
	public String update(@ModelAttribute @Validated UserEditForm userEditForm, BindingResult bindingResult, RedirectAttributes redirectAttributes) {
		//メールアドレスが変更されており、かつ登録済であれば、BindingResultオブジェクトにエラー内容を追加する
		if(userService.isEmailChanged(userEditForm) && userService.isEmailRegistered(userEditForm.getEmail())) {
			FieldError fieldError = new FieldError(bindingResult.getObjectName(), "email","すでに登録済のメールアドレスです。");
		}
		
		if(bindingResult.hasErrors()) {
			return "user/edit";
		}
		
		userSer
	}

}
